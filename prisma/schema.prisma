generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//To generate the dbml file, run: npx prisma generate
//Visualize the file at: https://dbdiagram.io
generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                    String                 @id @default(cuid())
  username              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  password              String
  image                 String?
  role                  String?
  address               String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  potentialCareSessions PotentialCareSession[]
  sessions              Session[]
  careSessions          CareSession[]
}

model CareSession {
  id                    String                 @id @default(cuid())
  user                  User                   @relation(fields: [userId], references: [id])
  userId                String // relation scalar field  (used in the `@relation` attribute above)
  name                  String?
  title                 String?
  address               String?
  medicalNotes          String?
  overview              String?
  sessionType           String?
  hourlyRate            Int?
  totalHours            Int?
  totalCompensation     Int?
  slug                  String
  acceptedCaregiverId   String?
  careSessionStatus     String? // could be "new", "scheduled", "completed", "canceled"
  createdAt             DateTime               @default(now())
  potentialCareSessions PotentialCareSession[]

  @@unique([slug])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PotentialCareSession {
  id            String      @id @default(cuid())
  caregiver     User        @relation(fields: [caregiverId], references: [id])
  caregiverId   String // relation scalar field  (used in the `@relation` attribute above)
  careSession   CareSession @relation(fields: [careSessionId], references: [id])
  careSessionId String // relation scalar field  (used in the `@relation` attribute above)
  status        String // could be "pending", "accepted", "rejected"
  appliedAt     DateTime    @default(now())
  slug          String

  @@unique([slug])
  @@index([caregiverId])
  @@index([careSessionId])
}
