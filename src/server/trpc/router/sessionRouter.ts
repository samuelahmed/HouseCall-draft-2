import { router, publicProcedure, privateProcedure } from "../trpc";
import { z } from "zod";
import slug from "slug";

export const sessionRouter = router({
  createOneSession: privateProcedure
    .input(
      z.object({
        name: z.string(),
        address: z.string(),
        medicalNotes: z.string(),
        overview: z.string(),
        title: z.string(),
      })
    )
    .mutation(async ({ input, ctx }) => {
      const { name, address, medicalNotes, overview, title } = input;
      //Instead of generating random string here it would be better to just use the id generated by prisma when the session is created
      const sessionId = Math.random().toString(36).substring(7)
      const item = await ctx.prisma.careSession.create({
        data: {
          sessionId,
          name,
          address,
          medicalNotes,
          overview,
          title,
          slug: slug(sessionId),
        },
      });
      return item;
    }
  ),  
  getAllSessions: publicProcedure.query(({ ctx }) => {
    const items = ctx.prisma.careSession.findMany();
    return items;
  }),

  getOneSession: privateProcedure.input(z.object({ slug: z.string() })).query(async ({ ctx, input }) => {
    const { slug } = input
    const card = await ctx.prisma.careSession.findUnique({
      where: {
        slug,
      },
    })
    return card
  }),

});
